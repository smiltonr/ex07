#+TITLE: Exercise 7: Matrices
#+AUTHOR: S Milton Rajendram

#+LaTeX_HEADER: \usepackage{palatino}
#+LaTeX_HEADER: \usepackage[top=1in, bottom=1.25in, left=1.25in, right=1.25in]{geometry}
#+LaTeX_HEADER: \usepackage{setspace}
#+OPTIONS: toc:nil

#+LATEX: \linespread{1.2}
#+PROPERTY: header-args :exports none

* Two-dimensional arrays
  - Declare and initialize a $2 \times 3$ two-dimensional
    array of integers.
  #+LATEX: \linespread{1}
    #+BEGIN_SRC C
    #define M 10
    #define N 10
    int a[M][N];
    #+END_SRC
  - Initialize the 2d array.
    #+BEGIN_SRC C
      int a[M][N] = {
	{1,2},
	{3,4},
	{5,6}
      };
    #+END_SRC
  #+LATEX: \linespread{1.2}
  - The size of first dimenstion is optional. Initialize the
    2d array, leaving out the first dimension.
  #+LATEX: \linespread{1}
    #+BEGIN_SRC C
      int a[][N] = {
	{1,2},
	{3,4},
	{5,6}
      };
    #+END_SRC
  #+LATEX: \linespread{1.2}
* Print a matrix on stdout
  Define a function =mat_print()= that prints a matrix. The
  function is passed three parameters: matrix =a[M][N]=, and
  two shape parameters =m= and =n= (number of rows and
  number of columns). The size of the first dimension in
  =a[M][N]= is optional. Test the function from =main()=.
  #+LATEX: \linespread{1}
  #+BEGIN_SRC C
    void mat_print (int a[][N], int m, int n)
    {
      for (int i = 0; i < m; i++) {
	  for (int j = 0; j < n; j++)
	    printf ("%d%s", a[i][j], j < n-1 ? ",":"\n");
      }
    }  
  #+END_SRC
  #+LATEX: \linespread{1.2}
* Read a matrix from stdin
  Define an input format for matrix. The first line
  specifies the number of rows $m$ and columns $n$ of the
  matrix. This is followed by $m$ lines. Each of these $m$
  lines has $n$ numbers. After $m$ lines, the data for
  another matrix may follow. For example, a $3 \times 4$
  matrix and a $4 \times 3$ may be formatted in stdin as
  follows. Test the function from =main()=.
  #+LATEX: \linespread{1}
  #+BEGIN_EXAMPLE
    3 4
    10 20 30 40
    50 60 70 80
    90 100 110 120
    4 3
    1 1 1
    2 2 2
    3 3 3
    4 4 4
  #+END_EXAMPLE
  #+LATEX: \linespread{1.2}
  Define a function =mat_read()= for reading a matrix in
  this format. It has there results: a matrix and the shape
  of the matrix. The shape variables are passed by
  reference. Since matrix is a 2-d array, it is already
  passed by reference. =a= is a constat pointer to an
  integer.
  #+LATEX: \linespread{1}
  #+BEGIN_SRC C :exports code
    void mat_read (int a[][SIZE], int* m, int* n)
    {
      char buffer[MAXLINE];
      char *line = buffer; // if line were an array, we cannot change it.
      int nbytes;
      int i, j;
  
      fgets(line, MAXLINE, stdin);
      sscanf (line, "%d%d", m, n);
  
      for (i = 0; i < *m; i++) {
	fgets(line, MAXLINE, stdin);
	for (j = 0; j < *n; j++) {
	  sscanf (line, "%d%n", &a[i][j], &nbytes);
	  line += nbytes;
	}
      }
    }
  #+END_SRC
  #+LATEX: \linespread{1.2}
* Matrix addition
  Write a function =mat_add (a, b, c, m, n)= to add two
  matrices =a= and =b= of shape =m x n=, and leave the
  result in matrix =c=. Test this function and all the
  subsequent functions from =main()=.
  #+LATEX: \linespread{1}
  #+BEGIN_SRC C
    void mat_add (int a[][SIZE], int b[][SIZE], int c[][SIZE], int m, int n)
    {
      for (int i = 0; i < m; i++)
	for (int j = 0; j < n; j++)
	  c[i][j] = a[i][j] + b[i][j];
    }
  #+END_SRC
  #+LATEX: \linespread{1.2}
* Matrix copy
  Define a function =mat_copy (a, b, m, n)= that copies a
  =m x n= matrix =a= to another matrix =b= of the same
  shape. 
  #+LATEX: \linespread{1}
  #+BEGIN_SRC C
    void mat_copy (int a[][SIZE], int b[][SIZE], int m, int n)
    {
      for (inti = 0; i < m; i++)
	for (int j = 0; j < n; j++)
	  b[i][j] = a[i][j];
    }
  #+END_SRC
  #+LATEX: \linespread{1.2}
* Matrix scale
  Write a function =mat_scale (a, b, m, n, f)= that maps
  every item of a =m x n= matrix =a= by multiplying it by it
  by a factor =f= and assignes the result to a matrix =b=. 
  #+BEGIN_EXAMPLE
  mat_scale (a, f, b)
    for i := 0 to m-1
      for j := 0 to n-1
         b[j,i] := f * a[i,j]
  #+END_EXAMPLE
    #+LATEX: \linespread{1.2}
* Matrix transpose
  Define a function =mat_transpose (a, b, m, n)= that
  assigns the transpose of a =m x n= matrix =a= to matrix
  =b=. 

  The algorithm for transposing a matrix is
  #+LATEX: \linespread{1}
  #+BEGIN_EXAMPLE
  mat_transpose (a, b)
    for i := 0 to m-1
      for j := 0 to n-1
         b[j,i] := a[i,j]
  #+END_EXAMPLE
  #+LATEX: \linespread{1.2}
  It takes two parameters: an input matrix =a= and an output
  matrix =b= in which the result is stored.  Thus, the
  function intends to use =a= as a read parameter and =b= as
  a write paratemeter.
  #+LATEX: \linespread{1}
  #+BEGIN_SRC C
    void mat_transpose (int a[][N], int c[][], int m, int n)
    {
      int c[N][N];

      for (int i = 0; i < m; i++)
	  for (int j = 0; j < n; j++)
	    c[j][i] = a[i][j];
    }
  #+END_SRC
  #+LATEX: \linespread{1.2}
  However, since arrays are passed by reference, actually
  both =a= and =b= are writeable. If someone calls the
  function as
  #+BEGIN_EXAMPLE
  mat_transpose (a, a, m, n)  
  #+END_EXAMPLE
  in which =a= is read and written, the specification will
  not be satisfied.  To avoid =a= being used for read and
  write simultaneously, we have to use a temporary matrix to
  store the transpose and, after the transpose is
  constructed completely, copy it in the output array.
  #+LATEX: \linespread{1}
  #+BEGIN_SRC C
    void mat_transpose (int a[][N], int b[][], int m, int n)
    {
      int c[N][N];

      for (int i = 0; i < m; i++)
	  for (int j = 0; j < n; j++)
	    c[j][i] = a[i][j];
      mat_copy (c, b, n, m);
    }
  #+END_SRC
  #+LATEX: \linespread{1.2}
* Matrix multiplication
  Define a function =mat_mul (a, b, c, m, n, p)= that
  multplies an =m x n= matrix =a= and an =n x p= matrix =b=
  and assigns the result to a =m x p= matrix =c=.

  The algorithm for matrix multiplication is as follows.
  #+LATEX: \linespread{1}
  #+BEGIN_EXAMPLE
  matrix_add (a, b, c)
    for i := 0 to m-1
      for j := 0 to p-1
         // dot product of row i and column j
         c[i,j] := 0;
	 for k := 0 to n-1:
            c[i,j] := a[i,k] + b [k,j]
  #+END_EXAMPLE
  #+LATEX: \linespread{1.2}
  To avoid writing =a= or =b=, produce the result in a
  temporary array =d=, and after the result is completely
  produced, save it in =c=.
  #+LATEX: \linespread{1}
  #+BEGIN_SRC C
    void mat_mul (int a[][N], int b[][N], int c[][N], int m, int n, int p)
    {
      int d[N][N];
  
      for (int i = 0; i < m; i++)
	for (int j = 0; j < p; j++) {
	  d[i][j] = 0;
	  for (int k = 0; k < n; k++)
	    d[i][j] += a[i][k] * b[k][j];
	}
      mat_copy (d, c, m, p);
    }  
  #+END_SRC
